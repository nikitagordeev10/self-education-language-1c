// 380. Вставка, удаление, получение случайного значения O(1)

// Реализуйте класс RandomizedSet:
// RandomizedSet() Инициализирует объект RandomizedSet.
// bool insert(int val) Вставляет элемент val в набор, если его нет. Возвращает true, если элемент не был найден, false в противном случае.
// bool remove(int val) Удаляет элемент val из набора, если он есть. Возвращает true, если элемент присутствует, и false в противном случае.
// int getRandom() Возвращает случайный элемент из текущего набора элементов (гарантируется, что при вызове этого метода существует хотя бы один элемент). 
// Каждый элемент должен иметь одинаковую вероятность возврата.
// Вы должны реализовать функции класса таким образом, чтобы каждая функция работала в среднем за O(1) секунд.

// Пример 1:
// Ввод
// ["Рандомизированный набор", "вставка", "удаление", "вставка", "случайное число", "удаление", "вставка", "случайное число"]
// [[], [1], [2], [2], [], [1], [2], []]
// Вывод
// [null, true, false, true, 2, true, false, 2]

// Объяснение
// Рандомизированный набор RandomizedSet = new RandomizedSet();
// randomizedSet.insert(1); // Вставляет 1 в набор. Возвращает true, так как 1 был успешно вставлен.
// randomizedSet.remove(2); // Возвращает false, так как 2 не существует в наборе.
// randomizedSet.insert(2); // Вставляет 2 в набор, возвращает true. Теперь набор содержит [1,2].
// randomizedSet.getRandom(); // getRandom() должен возвращать 1 или 2 случайным образом.
// randomizedSet.remove(1); // Удаляет 1 из набора, возвращает true. Набор теперь содержит [2].
// randomizedSet.insert(2); // 2 уже было в наборе, поэтому верните false.
// randomizedSet.getRandom(); // Поскольку 2 — единственное число в наборе, getRandom() всегда будет возвращать 2.
 
// Ограничения:
// -2^31 <= val <= 2^31 - 1
// Будет выполнено не более 2 * 10^5 вызовов для вставки, удаления и getRandom.
// При вызове getRandom в структуре данных будет хотя бы один элемент.

// 380. Insert Delete GetRandom O(1) // LeetCode URL: https://leetcode.com/problems/insert-delete-getrandom-o1/description/?envType=study-plan-v2&envId=top-interview-150

// Объявляем глобальные переменные
Перем ЭлементыИИхИндексы; // Хранит соответствие элемента и его индекса 
Перем Элементы; // Хранит элементы набора
Перем ГСЧ; // Для генерации случайного индекса

// Инициализация глобальных переменных
Процедура Инициализация() Экспорт
    ЭлементыИИхИндексы = Новый Соответствие; // для хранения элементов и их индексов
    Элементы = Новый Массив; // для хранения элементов, позволяет эффективно получать случайный элемент
    ГСЧ = Новый ГенераторСлучайныхЧисел;
КонецПроцедуры

// Вставляет элемент в набор. Возвращает Ложь, если элемент уже существует.
Функция Вставить(Знач НовыйЭлемент) Экспорт
    Если ЭлементыИИхИндексы.Получить(НовыйЭлемент) <> Неопределено Тогда
        Возврат Ложь; // Элемент уже существует
    КонецЕсли;

    // Добавляем значение в список и записываем его индекс в Соответствие
    Элементы.Добавить(НовыйЭлемент);
    ЭлементыИИхИндексы.Вставить(НовыйЭлемент, Элементы.Количество() - 1);

    Возврат Истина;
КонецФункции

// Удаляет элемент из набора. Возвращает Истина, если элемент удалён.
Функция Удалить(Знач УдаляемыйЭлемент) Экспорт
    Если ЭлементыИИхИндексы.Получить(УдаляемыйЭлемент) = Неопределено Тогда
        Возврат Ложь; // Элемента нет
    КонецЕсли;

    // Получаем индекс удаляемого элемента
    ИндексУдаляемого = ЭлементыИИхИндексы[УдаляемыйЭлемент];
    ПоследнийЭлемент = Элементы[Элементы.Количество() - 1];

    // Меняем местами удаляемый элемент с последним
    Элементы[ИндексУдаляемого] = ПоследнийЭлемент;
    ЭлементыИИхИндексы[ПоследнийЭлемент] = ИндексУдаляемого;

    // Удаляем последний элемент
    Элементы.Удалить(Элементы.Количество() - 1);
    ЭлементыИИхИндексы.Удалить(УдаляемыйЭлемент);

    Возврат Истина;
КонецФункции

// Возвращает случайный элемент из набора
Функция ПолучитьСлучайный() Экспорт
    СлучайныйИндекс = ГСЧ.СлучайноеЧисло(0, Элементы.Количество() - 1);
    Возврат Элементы[СлучайныйИндекс];
КонецФункции

// Пример использования
Процедура ПриНачалеРаботыСистемы()
    // Пример 1
    Инициализация();
    Сообщить("Вставка 1: " + Вставить(1)); // Истина
    Сообщить("Удаление 2 (несуществующий): " + Удалить(2)); // Ложь
    Сообщить("Вставка 2: " + Вставить(2)); // Истина
    Сообщить("Случайный элемент: " + ПолучитьСлучайный());
    Сообщить("Удаление 1: " + Удалить(1)); // Истина
    Сообщить("Вставка 2 (повторно): " + Вставить(2)); // Ложь
    Сообщить("Случайный элемент: " + ПолучитьСлучайный());
КонецПроцедуры
// 42. Сбор дождевой воды

// Учитывая n неотрицательных целых чисел, представляющих карту высот, где ширина каждой полосы равна 1, вычислите, сколько воды может собрать карта после дождя.

// Пример 1:
// Входные данные: высота = [0,1,0,2,1,0,1,3,2,1,2,1]
// Выходные данные: 6
// Объяснение: приведённая выше карта высот (чёрная секция) представлена массивом [0,1,0,2,1,0,1,3,2,1,2,1]. 
// В этом случае 6 единиц дождевой воды (синяя секция) задерживаются.

// Пример 2:
// Входные данные: высота = [4,2,0,3,2,5]
// Выходные данные: 9
 
// Ограничения:
// n == height.length
// 1 <= n <= 2 * 10^4
// 0 <= height[i] <= 10^5

// 42. Trapping Rain Water // LeetCode URL: https://leetcode.com/problems/trapping-rain-water/?envType=study-plan-v2&envId=top-interview-150

Функция СобратьВоду(Высоты) Экспорт

    // Устанавливаем начальные указатели на начало и конец массива высот
    ЛевыйУказатель = 0;                      
    ПравыйУказатель = Высоты.Количество() - 1; 

    // Переменные для хранения максимальных высот слева и справа от текущих указателей
    МаксВысотаСлева = 0;  
    МаксВысотаСправа = 0; 

    // Переменная для хранения общего объема воды
    ОбъемВоды = 0;

    // Основной цикл: двигаем указатели навстречу друг другу, пока они не пересекутся
    Пока ЛевыйУказатель <= ПравыйУказатель Цикл

        // Если высота на левом указателе меньше или равна высоте на правом указателе
        Если Высоты[ЛевыйУказатель] <= Высоты[ПравыйУказатель] Тогда

            // Проверяем, является ли текущая высота на левом указателе новой максимальной высотой слева
            Если Высоты[ЛевыйУказатель] >= МаксВысотаСлева Тогда
                // Если да, обновляем максимальную высоту слева
                МаксВысотаСлева = Высоты[ЛевыйУказатель];
            Иначе
                // Если текущая высота меньше максимальной высоты слева,
                // значит, здесь может скапливаться вода.
                // Добавляем разницу между максимальной высотой слева и текущей высотой в объем воды
                ОбъемВоды = ОбъемВоды + (МаксВысотаСлева - Высоты[ЛевыйУказатель]);
            КонецЕсли;

            // Сдвигаем левый указатель вправо, чтобы проверить следующий элемент
            ЛевыйУказатель = ЛевыйУказатель + 1;

        Иначе
            // Если высота на правом указателе меньше высоты на левом указателе

            // Проверяем, является ли текущая высота на правом указателе новой максимальной высотой справа
            Если Высоты[ПравыйУказатель] >= МаксВысотаСправа Тогда
                // Если да, обновляем максимальную высоту справа
                МаксВысотаСправа = Высоты[ПравыйУказатель];
            Иначе
                // Если текущая высота меньше максимальной высоты справа,
                // значит, здесь может скапливаться вода.
                // Добавляем разницу между максимальной высотой справа и текущей высотой в объем воды
                ОбъемВоды = ОбъемВоды + (МаксВысотаСправа - Высоты[ПравыйУказатель]);
            КонецЕсли;

            // Сдвигаем правый указатель влево, чтобы проверить следующий элемент
            ПравыйУказатель = ПравыйУказатель - 1;

        КонецЕсли;

    КонецЦикла;

    // Возвращаем общий объем воды, который удалось собрать
    Возврат ОбъемВоды;

КонецФункции

Функция ПреобразоватьМассивСтрокВЧисла(Массив)
	Для Индекс = 0 По Массив.Количество() - 1 Цикл
		Массив[Индекс] = Число(Массив[Индекс]);
	КонецЦикла;
	Возврат Массив;
КонецФункции

Процедура ПриНачалеРаботыСистемы()
    // Пример 1
	Высоты1 = Новый Массив;
	Высоты1 = СтрРазделить("0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1", ",");
	Высоты1 = ПреобразоватьМассивСтрокВЧисла(Высоты1);
	Сообщить("Объем собранной воды 1: " + СобратьВоду(Высоты1));

    // Пример 2
	Высоты2 = Новый Массив;
	Высоты2 = СтрРазделить("4,2,0,3,2,5", ",");
	Высоты2 = ПреобразоватьМассивСтрокВЧисла(Высоты2);
	Сообщить("Объем собранной воды 2: " + СобратьВоду(Высоты2));
КонецПроцедуры